"""
Django settings for collaboration_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-default-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition

# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
    
#     # Third-party apps
#     'rest_framework',
    
#     # Local apps
#     'apps.common',
#     'apps.chat',
# ]

# ASGI application for Django Channels
ASGI_APPLICATION = 'collaboration_backend.asgi.application'

# Channel layers configuration for WebSockets
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)],  # Using 'redis' as service name for Docker
        },
    },
}

SHARED_APPS = (
    'django_tenants',  # Must come before django.contrib.contenttypes
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'channels',  # Add channels to shared apps
    'django.contrib.staticfiles',
    'rest_framework',
)

TENANT_APPS = (
    'apps.common',
    'apps.chat',
)

INSTALLED_APPS = SHARED_APPS + TENANT_APPS

# Tenant configuration
TENANT_MODEL = 'common.Tenant'
TENANT_DOMAIN_MODEL = 'common.Domain'

# Database routing

# Keep django_tenants router first for proper initialization
DATABASE_ROUTERS = ['django_tenants.routers.TenantSyncRouter']
# DATABASE_ROUTERS = ['apps.chat.router.TenantRouter']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'collaboration_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'collaboration_backend.wsgi.application'

import os
from datetime import timedelta

# Database - Django-tenants configuration
DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',  # Add tenant support to PostgreSQL
        'NAME': os.getenv('DB_NAME', 'iam_login'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'Qu1ckAss1st@123'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

# Required django-tenants settings
DATABASE_ROUTERS = ['django_tenants.routers.TenantSyncRouter', 'apps.chat.router.TenantRouter']

# Name of the schema for the public tenant (usually 'public')
PUBLIC_SCHEMA_NAME = 'public'

# The schema name that will be used for tenant-specific tables
DEFAULT_TENANT_SCHEMA = 'turtlesoftware'


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'abc123',
    # 'AUTH_HEADER_TYPES': ('Bearer',),
}

# DATABASE_ROUTERS already defined above

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model (if needed in the future)
# AUTH_USER_MODEL = 'users.CustomUser'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'apps.common.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    # Return 401 Unauthorized instead of 403 Forbidden for unauthenticated requests
    'UNAUTHENTICATED_USER': None,
    'EXCEPTION_HANDLER': 'apps.common.utils.custom_exception_handler'
}

# Authentication Configuration - Used for the JWT authentication API
# These settings define the database table and field names for authenticating users
AUTH_TABLE = 'public.auth_user'  # Default Django user table
AUTH_TABLE_USERNAME_FIELD = 'username' 
AUTH_TABLE_EMAIL_FIELD = 'email'
AUTH_TABLE_PASSWORD_FIELD = 'password'  # This should be a hashed password field
AUTH_TABLE_USER_ID_FIELD = 'id'
AUTH_TABLE_TENANT_ID_FIELD = 'id'  # Using ID as tenant ID for now
